eyJvcmciOiI1YjNjZTM1OTc4NTExMTAwMDFjZjYyNDgiLCJpZCI6IjQ2YWIwMTU4OTAyNDRlNjk4OGZlOTFjNWEzMDNhZWEzIiwiaCI6Im11cm11cjY0In0=


1Ô∏è‚É£ Number triangle (continuous numbers)
java
Copy
Edit
import java.util.Scanner;
public class Pattern1 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int num = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(num + " ");
                num++;
            }
            System.out.println();
        }
    }
}
2Ô∏è‚É£ Alternating 0-1 triangle
java
Copy
Edit
import java.util.Scanner;
public class Pattern2 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print((i + j) % 2 + " ");
            }
            System.out.println();
        }
    }
}
3Ô∏è‚É£ Same number triangle
java
Copy
Edit
import java.util.Scanner;
public class Pattern3 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(i + " ");
            }
            System.out.println();
        }
    }
}
4Ô∏è‚É£ Row-wise increasing numbers
java
Copy
Edit
import java.util.Scanner;
public class Pattern4 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}
5Ô∏è‚É£ Left aligned pyramid
java
Copy
Edit
import java.util.Scanner;
public class Pattern5 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 1; i <= n; i++) {
            System.out.print(" ".repeat(n - i));
            System.out.println("* ".repeat(i));
        }
    }
}
6Ô∏è‚É£ Inverted left pyramid
java
Copy
Edit
import java.util.Scanner;
public class Pattern6 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = n; i >= 1; i--) {
            System.out.print(" ".repeat(n - i));
            System.out.println("* ".repeat(i));
        }
    }
}
7Ô∏è‚É£ Diamond
java
Copy
Edit
import java.util.Scanner;
public class Pattern7 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 1; i <= n; i++) {
            System.out.print(" ".repeat(n - i));
            System.out.println("*".repeat(2 * i - 1));
        }
        for (int i = n - 1; i >= 1; i--) {
            System.out.print(" ".repeat(n - i));
            System.out.println("*".repeat(2 * i - 1));
        }
    }
}
8Ô∏è‚É£ Hollow diamond (outline)
java
Copy
Edit
import java.util.Scanner;
public class Pattern8 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 1; i <= n; i++) {
            System.out.print(" ".repeat(n - i));
            for (int j = 1; j <= 2 * i - 1; j++) {
                if (j == 1 || j == 2 * i - 1)
                    System.out.print("*");
                else
                    System.out.print(" ");
            }
            System.out.println();
        }
        for (int i = n - 1; i >= 1; i--) {
            System.out.print(" ".repeat(n - i));
            for (int j = 1; j <= 2 * i - 1; j++) {
                if (j == 1 || j == 2 * i - 1)
                    System.out.print("*");
                else
                    System.out.print(" ");
            }
            System.out.println();
        }
    }
}
9Ô∏è‚É£ X-pattern (diagonal cross)
java
Copy
Edit
import java.util.Scanner;
public class Pattern9 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j || j == n - 1 - i)
                    System.out.print("* ");
                else
                    System.out.print("  ");
            }
            System.out.println();
        }
    }
}
üî• BONUS: Hollow rectangle
java
Copy
Edit
import java.util.Scanner;
public class Pattern10 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (i == 1 || i == n || j == 1 || j == m)
                    System.out.print("* ");
                else
                    System.out.print("  ");
            }
            System.out.println();
        }
    }
}

‚úÖ Floyd's Triangle
java
Copy
Edit
import java.util.Scanner;
public class FloydsTriangle {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int num = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(num + " ");
                num++;
            }
            System.out.println();
        }
    }
}
‚úÖ Pascal‚Äôs Triangle
java
Copy
Edit
import java.util.Scanner;
public class PascalsTriangle {
    public static int fact(int n) {
        int f = 1;
        for (int i = 1; i <= n; i++) f *= i;
        return f;
    }

    public static int nCr(int n, int r) {
        return fact(n) / (fact(r) * fact(n - r));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            System.out.print(" ".repeat(n - i));
            for (int j = 0; j <= i; j++) {
                System.out.print(nCr(i, j) + " ");
            }
            System.out.println();
        }
    }
}
‚úÖ Butterfly Pattern
java
Copy
Edit
import java.util.Scanner;
public class ButterflyPattern {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for (int i = 1; i <= n; i++) {
            System.out.print("*".repeat(i));
            System.out.print(" ".repeat(2 * (n - i)));
            System.out.println("*".repeat(i));
        }

        for (int i = n; i >= 1; i--) {
            System.out.print("*".repeat(i));
            System.out.print(" ".repeat(2 * (n - i)));
            System.out.println("*".repeat(i));
        }
    }
}
‚úÖ Number Pyramid
java
Copy
Edit
import java.util.Scanner;
public class NumberPyramid {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for (int i = 1; i <= n; i++) {
            System.out.print(" ".repeat(n - i));
            for (int j = 1; j <= i; j++) {
                System.out.print(i + " ");
            }
            System.out.println();
        }
    }
}
‚úÖ Hollow Pyramid
java
Copy
Edit
import java.util.Scanner;
public class HollowPyramid {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for (int i = 1; i <= n; i++) {
            System.out.print(" ".repeat(n - i));
            for (int j = 1; j <= 2 * i - 1; j++) {
                if (j == 1 || j == 2 * i - 1 || i == n)
                    System.out.print("*");
                else
                    System.out.print(" ");
            }
            System.out.println();
        }
    }
}


1Ô∏è‚É£ Linear Search
java
Copy
Edit
public class LinearSearch {
    public static void main(String[] args) {
        int[] arr = {3, 5, 7, 9, 11};
        int target = 7;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                System.out.println("Found at index " + i);
                break;
            }
        }
    }
}
2Ô∏è‚É£ Binary Search
java
Copy
Edit
import java.util.Arrays;
public class BinarySearch {
    public static void main(String[] args) {
        int[] arr = {2, 4, 6, 8, 10};
        int target = 6;
        int low = 0, high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == target) {
                System.out.println("Found at index " + mid);
                break;
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
    }
}
3Ô∏è‚É£ Bubble Sort
java
Copy
Edit
public class BubbleSort {
    public static void main(String[] args) {
        int[] arr = {5, 3, 8, 4};
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // swap
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
4Ô∏è‚É£ Selection Sort
java
Copy
Edit
public class SelectionSort {
    public static void main(String[] args) {
        int[] arr = {64, 25, 12, 22, 11};
        for (int i = 0; i < arr.length; i++) {
            int minIdx = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[minIdx]) {
                    minIdx = j;
                }
            }
            // swap
            int temp = arr[i];
            arr[i] = arr[minIdx];
            arr[minIdx] = temp;
        }
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
5Ô∏è‚É£ Insertion Sort
java
Copy
Edit
public class InsertionSort {
    public static void main(String[] args) {
        int[] arr = {12, 11, 13, 5, 6};
        for (int i = 1; i < arr.length; i++) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
6Ô∏è‚É£ Merge Sort
java
Copy
Edit
public class MergeSort {
    public static void mergeSort(int[] arr, int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }
    public static void merge(int[] arr, int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;
        int[] L = new int[n1];
        int[] R = new int[n2];
        for (int i = 0; i < n1; i++)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; j++)
            R[j] = arr[m + 1 + j];
        int i = 0, j = 0, k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k++] = L[i++];
            } else {
                arr[k++] = R[j++];
            }
        }
        while (i < n1) {
            arr[k++] = L[i++];
        }
        while (j < n2) {
            arr[k++] = R[j++];
        }
    }
    public static void main(String[] args) {
        int[] arr = {12, 11, 13, 5, 6, 7};
        mergeSort(arr, 0, arr.length - 1);
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
7Ô∏è‚É£ Quick Sort
java
Copy
Edit
public class QuickSort {
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                // swap
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        // swap
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }
    public static void main(String[] args) {
        int[] arr = {10, 7, 8, 9, 1, 5};
        quickSort(arr, 0, arr.length - 1);
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
8Ô∏è‚É£ Two Pointers Technique
java
Copy
Edit
public class TwoPointers {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 6};
        int target = 6;
        int left = 0, right = arr.length - 1;
        while (left < right) {
            int sum = arr[left] + arr[right];
            if (sum == target) {
                System.out.println(arr[left] + " " + arr[right]);
                break;
            } else if (sum < target) {
                left++;
            } else {
                right--;
            }
        }
    }
}
9Ô∏è‚É£ Sliding Window
java
Copy
Edit
public class SlidingWindow {
    public static void main(String[] args) {
        int[] arr = {1, 4, 2, 10, 23, 3, 1, 0, 20};
        int k = 3;
        int windowSum = 0, maxSum = 0;
        for (int i = 0; i < k; i++) {
            windowSum += arr[i];
        }
        maxSum = windowSum;
        for (int i = k; i < arr.length; i++) {
            windowSum += arr[i] - arr[i - k];
            maxSum = Math.max(maxSum, windowSum);
        }
        System.out.println(maxSum);
    }
}
üîü Kadane‚Äôs Algorithm
java
Copy
Edit
public class Kadane {
    public static void main(String[] args) {
        int[] arr = {-2,1,-3,4,-1,2,1,-5,4};
        int maxSoFar = arr[0], maxEndingHere = arr[0];
        for (int i = 1; i < arr.length; i++) {
            maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]);
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }
        System.out.println(maxSoFar);
    }
}
1Ô∏è‚É£1Ô∏è‚É£ Prefix Sum
java
Copy
Edit
public class PrefixSum {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        int[] prefix = new int[arr.length + 1];
        for (int i = 0; i < arr.length; i++) {
            prefix[i + 1] = prefix[i] + arr[i];
        }
        // Sum from index 1 to 3
        System.out.println(prefix[4] - prefix[1]); // 9
    }
}
1Ô∏è‚É£2Ô∏è‚É£ Flood Fill (DFS)
java
Copy
Edit
public class FloodFill {
    public static void floodFill(int[][] grid, int r, int c, int newColor, int origColor) {
        if (r < 0 || c < 0 || r >= grid.length || c >= grid[0].length || grid[r][c] != origColor) {
            return;
        }
        grid[r][c] = newColor;
        floodFill(grid, r + 1, c, newColor, origColor);
        floodFill(grid, r - 1, c, newColor, origColor);
        floodFill(grid, r, c + 1, newColor, origColor);
        floodFill(grid, r, c - 1, newColor, origColor);
    }
    public static void main(String[] args) {
        int[][] grid = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        floodFill(grid, 1, 1, 2, grid[1][1]);
        for (int[] row : grid) {
            for (int val : row) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
    }
}

python

1. Linear Search

‚û° Search for an element by checking each item one by one.

üìå Example:

arr = [3, 5, 7, 9, 11]
target = 7
for i in range(len(arr)):
    if arr[i] == target:
        print(f"Found at index {i}")  # Found at index 2
‚úÖ Best when the list is unsorted.

2. Binary Search
‚û° Search a sorted array by repeatedly dividing the search space in half.

üìå Example:

arr = [2, 4, 6, 8, 10]
target = 6
low, high = 0, len(arr)-1
while low <= high:
    mid = (low + high) // 2
    if arr[mid] == target:
        print(f"Found at index {mid}")  # Found at index 2
        break
    elif arr[mid] < target:
        low = mid + 1
    else:
        high = mid - 1
‚úÖ Much faster than linear search on sorted data (O(log n)).

3Ô∏è. Bubble Sort
‚û° Repeatedly swap adjacent elements if they are in the wrong order.

üìå Example:

arr = [5, 3, 8, 4]
for i in range(len(arr)):
    for j in range(0, len(arr)-i-1):
        if arr[j] > arr[j+1]:
            arr[j], arr[j+1] = arr[j+1], arr[j]
print(arr)  # [3, 4, 5, 8]
‚úÖ Simple but inefficient for large lists.

4Ô∏è. Selection Sort
‚û° Select the minimum element and put it at the beginning.

üìå Example:

arr = [64, 25, 12, 22, 11]
for i in range(len(arr)):
    min_idx = i
    for j in range(i+1, len(arr)):
        if arr[j] < arr[min_idx]:
            min_idx = j
    arr[i], arr[min_idx] = arr[min_idx], arr[i]
print(arr)  # [11, 12, 22, 25, 64]
‚úÖ Easy to understand, but not efficient (O(n¬≤)).

5Ô∏è. Insertion Sort
‚û° Build the sorted array one item at a time.

üìå Example:

arr = [12, 11, 13, 5, 6]
for i in range(1, len(arr)):
    key = arr[i]
    j = i-1
    while j >= 0 and key < arr[j]:
        arr[j+1] = arr[j]
        j -= 1
    arr[j+1] = key
print(arr)  # [5, 6, 11, 12, 13]
‚úÖ Works well for small or nearly sorted data.

6Ô∏è. Merge Sort
‚û° Divide the array in halves, sort them recursively, and merge.

üìå Example:

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]
        merge_sort(L)
        merge_sort(R)
        i = j = k = 0
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
arr = [12, 11, 13, 5, 6, 7]
merge_sort(arr)
print(arr)  # [5, 6, 7, 11, 12, 13]
‚úÖ Time: O(n log n), good for large datasets.

7Ô∏è. Quick Sort
‚û° Pick a pivot, partition array so smaller elements go left and larger right, then sort partitions.

üìå Example:

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less = [x for x in arr[1:] if x <= pivot]
        greater = [x for x in arr[1:] if x > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)
arr = [10, 7, 8, 9, 1, 5]
print(quick_sort(arr))  # [1, 5, 7, 8, 9, 10]
‚úÖ Fast on average: O(n log n)

8Ô∏è. Two Pointers Technique
‚û° Use two pointers to iterate through data for optimized solutions.

üìå Example: Find pair with target sum

arr = [1, 2, 3, 4, 6]
target = 6
l, r = 0, len(arr)-1
while l < r:
    s = arr[l] + arr[r]
    if s == target:
        print(arr[l], arr[r])  # 2 4
        break
    elif s < target:
        l += 1
    else:
        r -= 1
‚úÖ Works on sorted arrays.

9Ô∏è. Sliding Window Technique
‚û° Maintain a window (subset) and slide it across to solve problems efficiently.

üìå Example: Max sum of subarray of size 3

arr = [1, 4, 2, 10, 23, 3, 1, 0, 20]
k = 3
window_sum = sum(arr[:k])
max_sum = window_sum
for i in range(len(arr)-k):
    window_sum = window_sum - arr[i] + arr[i+k]
    max_sum = max(max_sum, window_sum)
print(max_sum)  # 39
‚úÖ Reduces time complexity for subarray problems.

üîü Kadane‚Äôs Algorithm
‚û° Find maximum subarray sum (contiguous).

üìå Example:

python
Copy
Edit
arr = [-2,1,-3,4,-1,2,1,-5,4]
max_sum = curr_sum = arr[0]
for num in arr[1:]:
    curr_sum = max(num, curr_sum + num)
    max_sum = max(max_sum, curr_sum)
print(max_sum)  # 6
‚úÖ O(n) time, great for max subarray problems.

1Ô∏è‚É£1Ô∏è‚É£ Prefix Sum and Difference Arrays
‚û° Precompute cumulative sums for fast range queries.

üìå Example:

python
Copy
Edit
arr = [1, 2, 3, 4, 5]
prefix = [0] * (len(arr)+1)
for i in range(len(arr)):
    prefix[i+1] = prefix[i] + arr[i]
# Sum from index 1 to 3 (2 + 3 + 4)
print(prefix[4] - prefix[1])  # 9
‚úÖ Efficient for range sum queries.

1Ô∏è‚É£2Ô∏è‚É£ Flood Fill Algorithm (DFS/BFS for grid problems)
‚û° Fill connected region in a matrix/grid (like paint bucket tool).

üìå Example:

python
Copy
Edit
def flood_fill(grid, r, c, new_color, orig_color):
    if (r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] != orig_color):
        return
    grid[r][c] = new_color
    flood_fill(grid, r+1, c, new_color, orig_color)
    flood_fill(grid, r-1, c, new_color, orig_color)
    flood_fill(grid, r, c+1, new_color, orig_color)
    flood_fill(grid, r, c-1, new_color, orig_color)

grid = [
    [1,1,1],
    [1,1,0],
    [1,0,1]
]
flood_fill(grid, 1, 1, 2, grid[1][1])
print(grid)  # [[2,2,2],[2,2,0],[2,0,1]]
